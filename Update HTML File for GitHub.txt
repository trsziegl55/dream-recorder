<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dream Recorder with AI Interpretation</title>
    <script src="https://cdn.webrtc-experiment.com/RecordRTC.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 50px;
            background-color: #f0f8ff;
        }
        button {
            padding: 15px 30px;
            font-size: 18px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin: 10px;
        }
        button:disabled {
            background-color: #ccc;
        }
        a {
            display: none;
            text-decoration: none;
            padding: 15px 30px;
            background-color: #008CBA;
            color: white;
            border-radius: 5px;
            font-size: 18px;
            margin-top: 10px;
            cursor: pointer;
        }
        #interpretation-output {
            margin-top: 20px;
            font-size: 18px;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <h1>Record Your Dream</h1>
    <p>Use the button below to start recording your dream. Once finished, click "Stop Recording".</p>
    
    <!-- Start/Stop buttons for recording -->
    <button id="start-btn">Start Recording</button>
    <button id="stop-btn" disabled>Stop Recording</button>
    
    <!-- Link to download the audio -->
    <a id="download-btn" href="#" download="dream_recording.wav">Download Recording</a>

    <!-- Display interpretation -->
    <div id="interpretation-output">
        <!-- Dream interpretation will appear here -->
    </div>

    <script>
        var recorder;
        var audioBlob;

        // Function to start recording audio
        document.getElementById('start-btn').onclick = function() {
            this.disabled = true;
            document.getElementById('stop-btn').disabled = false;

            navigator.mediaDevices.getUserMedia({ audio: true })
                .then(function(stream) {
                    recorder = RecordRTC(stream, { type: 'audio' });
                    recorder.startRecording();
                })
                .catch(function(error) {
                    alert('Failed to access your microphone. Please allow microphone access.');
                });
        };

        // Function to stop recording and display the download link
        document.getElementById('stop-btn').onclick = function() {
            this.disabled = true;
            document.getElementById('start-btn').disabled = false;

            recorder.stopRecording(function() {
                audioBlob = recorder.getBlob();
                var audioUrl = URL.createObjectURL(audioBlob);

                var downloadBtn = document.getElementById('download-btn');
                downloadBtn.href = audioUrl;
                downloadBtn.style.display = 'inline-block'; // Show the button
                
                // Transcribe the audio and send it to OpenAI for interpretation
                transcribeAudio(audioBlob);
            });
        };

        // Function to transcribe the audio using Speech-to-Text API (you'll need to integrate a service for transcription)
        function transcribeAudio(audioBlob) {
            // Simulate transcription for now (replace with actual transcription service)
            var transcribedText = "This is a test dream transcription.";

            // Once the text is transcribed, send it to OpenAI for interpretation
            getDreamInterpretation(transcribedText);
        }

        // Function to send the transcribed dream text to OpenAI for interpretation
        function getDreamInterpretation(transcribedText) {
            const apiKey = "YOUR_OPENAI_API_KEY";  // Replace with your OpenAI API key
            
            fetch("https://api.openai.com/v1/completions", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${apiKey}`,
                },
                body: JSON.stringify({
                    model: "text-davinci-003",  // Use the OpenAI GPT model
                    prompt: `Interpret this dream spiritually: "${transcribedText}"`,  // The transcribed text
                    max_tokens: 200,  // Adjust based on response length
                    temperature: 0.7,  // Controls the creativity of the response
                }),
            })
            .then(response => response.json())
            .then(data => {
                // Display the interpretation
                displayInterpretation(data.choices[0].text);
            })
            .catch(error => {
                console.error("Error interpreting the dream:", error);
            });
        }

        // Function to display the interpretation result on the page
        function displayInterpretation(interpretationText) {
            const outputElement = document.getElementById("interpretation-output");
            outputElement.innerHTML = `<strong>Dream Interpretation:</strong><br>${interpretationText}`;
        }
    </script>
</body>
</html>
