<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dream Recorder</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            text-align: center;
        }
        #recordingSection {
            margin-top: 20px;
        }
        #interpretation {
            margin-top: 20px;
            font-weight: bold;
            display: none;
        }
    </style>
</head>
<body>

    <h1>Record Your Dream</h1>
    <p>Use the button below to start recording your dream. Once finished, click "Stop Recording".</p>

    <div id="recordingSection">
        <button id="startRecording" onclick="startRecording()">Start Recording</button>
        <button id="stopRecording" onclick="stopRecording()" disabled>Stop Recording</button>
    </div>

    <div id="transcriptionSection" style="display: none;">
        <h2>Your Transcription:</h2>
        <p id="transcription"></p>
    </div>

    <div id="interpretation">
        <h2>Dream Interpretation:</h2>
        <p id="interpretationText"></p>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@firebase/app@9.6.1/dist/firebase-app.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@firebase/storage@9.6.1/dist/firebase-storage.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@firebase/auth@9.6.1/dist/firebase-auth.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/firebase-functions@3.0.0/dist/index.js"></script>

    <script>
        // Initialize Firebase
        const firebaseConfig = {
            apiKey: 'YOUR_FIREBASE_API_KEY',  // Add your Firebase API Key here
            authDomain: 'YOUR_PROJECT_ID.firebaseapp.com',  // Your Firebase project ID
            projectId: 'YOUR_PROJECT_ID',  // Your Firebase project ID
            storageBucket: 'YOUR_PROJECT_ID.appspot.com',  // Your Firebase storage bucket
            messagingSenderId: 'YOUR_SENDER_ID',
            appId: 'YOUR_APP_ID',
            measurementId: 'YOUR_MEASUREMENT_ID'
        };
        const app = firebase.initializeApp(firebaseConfig);
        const storage = firebase.storage();

        // Setup for Speech Recognition (for transcribing audio)
        let recorder;
        let audioBlob;
        let audioUrl;

        // Initialize Speech Recognition
        function startRecording() {
            // Start recording audio
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ audio: true })
                    .then(function (stream) {
                        recorder = new MediaRecorder(stream);
                        recorder.ondataavailable = function (event) {
                            audioBlob = event.data;
                            audioUrl = URL.createObjectURL(audioBlob);
                        };
                        recorder.start();
                        document.getElementById('startRecording').disabled = true;
                        document.getElementById('stopRecording').disabled = false;
                    })
                    .catch(function (error) {
                        console.error('Error accessing microphone:', error);
                    });
            }
        }

        function stopRecording() {
            recorder.stop();
            document.getElementById('startRecording').disabled = false;
            document.getElementById('stopRecording').disabled = true;

            // Upload audio to Firebase Storage
            const audioRef = storage.ref().child('audio/' + Date.now() + '.ogg');
            audioRef.put(audioBlob).then(function (snapshot) {
                console.log('Audio uploaded successfully!');
                // After uploading, transcribe audio to text
                transcribeAudio(snapshot);
            });
        }

        function transcribeAudio(snapshot) {
            // Once audio is uploaded, retrieve the audio URL
            snapshot.ref.getDownloadURL().then(function (downloadURL) {
                // Send the audio URL to the backend or use a Speech-to-Text API
                fetch('https://your-speech-to-text-api-endpoint', {
                    method: 'POST',
                    body: JSON.stringify({ audioUrl: downloadURL }),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    const transcribedText = data.transcription; // Assuming the response has a 'transcription' field
                    document.getElementById('transcription').textContent = transcribedText;
                    document.getElementById('transcriptionSection').style.display = 'block';
                    getDreamInterpretation(transcribedText);  // Send to AI for interpretation
                })
                .catch(error => console.error('Error transcribing audio:', error));
            });
        }

        function getDreamInterpretation(transcribedText) {
            const apiKey = 'YOUR_OPENAI_API_KEY';  // Your OpenAI API key

            fetch('https://api.openai.com/v1/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: 'text-davinci-003', // You can use any model you prefer
                    prompt: `Please interpret the following dream: ${transcribedText}`,
                    max_tokens: 150
                })
            })
            .then(response => response.json())
            .then(data => {
                const interpretation = data.choices[0].text.trim();
                displayInterpretation(interpretation);
            })
            .catch(error => console.error('Error interpreting dream:', error));
        }

        function displayInterpretation(interpretation) {
            const interpretationDiv = document.getElementById('interpretationText');
            interpretationDiv.innerText = interpretation;
            document.getElementById('interpretation').style.display = 'block';
        }
    </script>
</body>
</html>
