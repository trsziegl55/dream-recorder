<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dream Recorder</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; margin: 20px; }
        button { padding: 10px 20px; margin: 10px; cursor: pointer; }
        p { font-size: 18px; }
        #transcribedText, #dreamInterpretation { font-weight: bold; color: #2b2b2b; }
    </style>
</head>
<body>

    <h1>Dream Recorder & Interpreter</h1>

    <!-- Recording Controls -->
    <button id="startRecording">Start Recording</button>
    <button id="stopRecording" disabled>Stop Recording</button>
    <audio id="audioPlayback" controls></audio>
    <a id="downloadLink" style="display:none" download="dream.wav">Download Recording</a>

    <!-- Transcription Button -->
    <button id="transcribeButton">Transcribe Recording</button>

    <!-- Display Transcribed Text -->
    <p>Transcribed Text: <span id="transcribedText"></span></p>

    <!-- Interpretation Button -->
    <button id="interpretButton">Interpret Dream</button>

    <!-- Display Dream Interpretation -->
    <p>Dream Interpretation: <span id="dreamInterpretation"></span></p>

    <script>
        let mediaRecorder;
        let audioChunks = [];

        // Speech Recognition API
        window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = new SpeechRecognition();
        recognition.lang = 'en-US';
        recognition.continuous = false;
        recognition.interimResults = false;

        // Start Recording
        document.getElementById("startRecording").addEventListener("click", async function() {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = event => audioChunks.push(event.data);
            mediaRecorder.onstop = async () => {
                const audioBlob = new Blob(audioChunks, { type: "audio/wav" });
                const audioUrl = URL.createObjectURL(audioBlob);
                document.getElementById("audioPlayback").src = audioUrl;
                document.getElementById("downloadLink").href = audioUrl;
                document.getElementById("downloadLink").style.display = "block";
            };

            mediaRecorder.start();
            document.getElementById("startRecording").disabled = true;
            document.getElementById("stopRecording").disabled = false;
        });

        // Stop Recording
        document.getElementById("stopRecording").addEventListener("click", function() {
            mediaRecorder.stop();
            document.getElementById("startRecording").disabled = false;
            document.getElementById("stopRecording").disabled = true;
        });

        // Transcription (Speech-to-Text)
        document.getElementById("transcribeButton").addEventListener("click", function() {
            recognition.start();
        });

        recognition.onresult = function(event) {
            const transcript = event.results[0][0].transcript;
            document.getElementById("transcribedText").innerText = transcript;
        };

        recognition.onerror = function(event) {
            console.error("Speech recognition error:", event.error);
        };

        // Send Transcribed Text to AI
        document.getElementById("interpretButton").addEventListener("click", async function() {
            const dreamText = document.getElementById("transcribedText").innerText;
            if (!dreamText) {
                alert("Please transcribe a dream first.");
                return;
            }

            const response = await fetch("https://api.openai.com/v1/chat/completions", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer YOUR_OPENAI_API_KEY"
                },
                body: JSON.stringify({
                    model: "gpt-4",
                    messages: [{ role: "user", content: `Interpret this dream: ${dreamText}` }]
                })
            });

            const result = await response.json();
            document.getElementById("dreamInterpretation").innerText = result.choices[0].message.content;
        });
    </script>

</body>
</html>
