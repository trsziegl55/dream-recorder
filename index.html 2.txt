<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dream Recorder App</title>
    
    <!-- Firebase SDKs (Must be before your script) -->
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js"></script>

    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f3f3f3;
            color: #333;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
            background-color: white;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1, h2 {
            color: #007BFF;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            margin: 10px;
            cursor: pointer;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 5px;
        }
        button:disabled {
            background-color: #d3d3d3;
        }
        #dream-transcript, #dream-interpretation {
            background-color: #f9f9f9;
            padding: 15px;
            border: 1px solid #ddd;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Record Your Dream</h1>

        <button id="start-recording">Start Recording</button>
        <button id="stop-recording" disabled>Stop Recording</button>
        <button id="download-recording" disabled>Download Recording</button>
        <button id="transcribe" disabled>Transcribe to Text</button>
        <button id="interpret-dream" disabled>Interpret Dream</button>

        <h2>Your Dream Transcript:</h2>
        <div id="dream-transcript">
            <p>No transcription yet.</p>
        </div>

        <h2>Interpretation:</h2>
        <div id="dream-interpretation">
            <p>No interpretation yet.</p>
        </div>
    </div>

    <script>
        // ✅ Initialize Firebase (Replace with your actual Firebase config)
        const firebaseConfig = {
            apiKey: "YOUR_API_KEY",
            authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
            projectId: "YOUR_PROJECT_ID",
            storageBucket: "YOUR_PROJECT_ID.appspot.com",
            messagingSenderId: "YOUR_SENDER_ID",
            appId: "YOUR_APP_ID"
        };

        // ✅ Ensure Firebase is available before using
        document.addEventListener("DOMContentLoaded", function() {
            firebase.initializeApp(firebaseConfig);
            console.log("✅ Firebase Loaded:", firebase);
        });

        // Select buttons
        const startRecordingBtn = document.getElementById('start-recording');
        const stopRecordingBtn = document.getElementById('stop-recording');
        const downloadRecordingBtn = document.getElementById('download-recording');
        const transcribeBtn = document.getElementById('transcribe');
        const interpretBtn = document.getElementById('interpret-dream');

        // Select transcript and interpretation areas
        const transcriptDiv = document.getElementById('dream-transcript');
        const interpretationDiv = document.getElementById('dream-interpretation');

        let recognition;
        let isRecording = false;
        let audioBlob;
        let audioURL;
        let recorder;

        // ✅ Check if SpeechRecognition is supported
        if ('webkitSpeechRecognition' in window) {
            recognition = new webkitSpeechRecognition();
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.lang = 'en-US';

            recognition.onstart = () => {
                isRecording = true;
                startRecordingBtn.disabled = true;
                stopRecordingBtn.disabled = false;
                transcribeBtn.disabled = false;
                interpretBtn.disabled = false;
            };

            recognition.onend = () => {
                isRecording = false;
                startRecordingBtn.disabled = false;
                stopRecordingBtn.disabled = true;
            };

            recognition.onresult = (event) => {
                let transcript = '';
                for (let i = event.resultIndex; i < event.results.length; i++) {
                    transcript += event.results[i][0].transcript;
                }
                transcriptDiv.innerHTML = `<p>${transcript}</p>`;
            };
        }

        // Start Recording
        startRecordingBtn.addEventListener('click', () => {
            recognition.start();
        });

        // Stop Recording
        stopRecordingBtn.addEventListener('click', () => {
            recognition.stop();
        });

        // Transcribe to Text
        transcribeBtn.addEventListener('click', () => {
            if (isRecording) {
                recognition.stop();
            }
        });

        // AI Interpretation (Replace with real API)
        interpretBtn.addEventListener('click', async () => {
            const dreamText = transcriptDiv.innerText.trim();
            if (dreamText === "" || dreamText === "No transcription yet.") {
                alert("Please record and transcribe your dream first.");
                return;
            }

            try {
                const response = await fetch('https://your-api-endpoint.com/interpreter', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ dream_text: dreamText }),
                });

                const data = await response.json();
                interpretationDiv.innerHTML = `<p>${data.interpretation}</p>`;
            } catch (error) {
                console.error("Error interpreting the dream:", error);
                interpretationDiv.innerHTML = `<p>Sorry, there was an error interpreting your dream.</p>`;
            }
        });

        // Enable download of recording
        downloadRecordingBtn.addEventListener('click', () => {
            const link = document.createElement('a');
            link.href = audioURL;
            link.download = 'recorded_dream.wav';
            link.click();
        });
    </script>
</body>
</html>
       
